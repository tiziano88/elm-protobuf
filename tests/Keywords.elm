module Keywords exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: keywords.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42


type alias Keywords =
    { module_ : Int -- 1
    , exposing_ : Int -- 2
    , import_ : Int -- 3
    , type_ : Int -- 4
    , let_ : Int -- 5
    , in_ : Int -- 6
    , if_ : Int -- 7
    , then_ : Int -- 8
    , else_ : Int -- 9
    , where_ : Int -- 10
    , case_ : Int -- 11
    , of_ : Int -- 12
    , port_ : Int -- 13
    , as_ : Int -- 14
    }
type KeywordsMessage = KeywordsMessage Keywords


keywordsDecoder : JD.Decoder Keywords
keywordsDecoder =
    JD.lazy <| \_ -> decode Keywords
        |> required "module" intDecoder 0
        |> required "exposing" intDecoder 0
        |> required "import" intDecoder 0
        |> required "type" intDecoder 0
        |> required "let" intDecoder 0
        |> required "in" intDecoder 0
        |> required "if" intDecoder 0
        |> required "then" intDecoder 0
        |> required "else" intDecoder 0
        |> required "where" intDecoder 0
        |> required "case" intDecoder 0
        |> required "of" intDecoder 0
        |> required "port" intDecoder 0
        |> required "as" intDecoder 0


keywordsEncoder : Keywords -> JE.Value
keywordsEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "module" JE.int 0 v.module_)
        , (requiredFieldEncoder "exposing" JE.int 0 v.exposing_)
        , (requiredFieldEncoder "import" JE.int 0 v.import_)
        , (requiredFieldEncoder "type" JE.int 0 v.type_)
        , (requiredFieldEncoder "let" JE.int 0 v.let_)
        , (requiredFieldEncoder "in" JE.int 0 v.in_)
        , (requiredFieldEncoder "if" JE.int 0 v.if_)
        , (requiredFieldEncoder "then" JE.int 0 v.then_)
        , (requiredFieldEncoder "else" JE.int 0 v.else_)
        , (requiredFieldEncoder "where" JE.int 0 v.where_)
        , (requiredFieldEncoder "case" JE.int 0 v.case_)
        , (requiredFieldEncoder "of" JE.int 0 v.of_)
        , (requiredFieldEncoder "port" JE.int 0 v.port_)
        , (requiredFieldEncoder "as" JE.int 0 v.as_)
        ]
