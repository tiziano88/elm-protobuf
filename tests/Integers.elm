module Integers exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: integers.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42


type alias ThirtyTwo =
    { int32Field : Int -- 1
    , uint32Field : Int -- 2
    , sint32Field : Int -- 3
    , fixed32Field : Int -- 4
    , sfixed32Field : Int -- 5
    }
type ThirtyTwoMessage = ThirtyTwoMessage ThirtyTwo


thirtyTwoDecoder : JD.Decoder ThirtyTwo
thirtyTwoDecoder =
    JD.lazy <| \_ -> decode ThirtyTwo
        |> required "int32Field" intDecoder 0
        |> required "uint32Field" intDecoder 0
        |> required "sint32Field" intDecoder 0
        |> required "fixed32Field" intDecoder 0
        |> required "sfixed32Field" intDecoder 0


thirtyTwoEncoder : ThirtyTwo -> JE.Value
thirtyTwoEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "int32Field" JE.int 0 v.int32Field)
        , (requiredFieldEncoder "uint32Field" JE.int 0 v.uint32Field)
        , (requiredFieldEncoder "sint32Field" JE.int 0 v.sint32Field)
        , (requiredFieldEncoder "fixed32Field" JE.int 0 v.fixed32Field)
        , (requiredFieldEncoder "sfixed32Field" JE.int 0 v.sfixed32Field)
        ]


type alias SixtyFour =
    { int64Field : Int -- 1
    , uint64Field : Int -- 2
    , sint64Field : Int -- 3
    , fixed64Field : Int -- 4
    , sfixed64Field : Int -- 5
    }
type SixtyFourMessage = SixtyFourMessage SixtyFour


sixtyFourDecoder : JD.Decoder SixtyFour
sixtyFourDecoder =
    JD.lazy <| \_ -> decode SixtyFour
        |> required "int64Field" intDecoder 0
        |> required "uint64Field" intDecoder 0
        |> required "sint64Field" intDecoder 0
        |> required "fixed64Field" intDecoder 0
        |> required "sfixed64Field" intDecoder 0


sixtyFourEncoder : SixtyFour -> JE.Value
sixtyFourEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "int64Field" numericStringEncoder 0 v.int64Field)
        , (requiredFieldEncoder "uint64Field" numericStringEncoder 0 v.uint64Field)
        , (requiredFieldEncoder "sint64Field" numericStringEncoder 0 v.sint64Field)
        , (requiredFieldEncoder "fixed64Field" numericStringEncoder 0 v.fixed64Field)
        , (requiredFieldEncoder "sfixed64Field" numericStringEncoder 0 v.sfixed64Field)
        ]
